import operator
import sys
import numpy as np
# print(np.__version__)

# data = np.loadtxt("small.txt", dtype = np.int64)

# 10
# -2994873805028440006 -3924305387599087932 622205972701610498 2450795415435049049
# 311205805759416898 2383093566047344843 143359968546944 4184183959957061889
# -7043543488230588120 5913597432553668887 24259073302350728 56517609178469638
# -3772712603677938576 5783345048477245225 -9136812498587383720 -8322359443689757590
# 4928956794688372822 2882994825048908049 3034315865593882881 -8534576377304046568
# -5707117001224609742 -209852649875437 8284 306315490039983296 5983211492097615104
# 7784053204123992961 74367891998298368 4614278115062942513 4344884748654020772
# -7861982003676568640 21417151093015682 4992260044220543561 -2008602588736967652
# -5480845402097503207 -8047642174243681078 -8106161358270757878 1159404610664028672
# -5480827809911458792 -8047642174780551990 1126217877838759435 1158841675742990848


def bitCount(int_type): # https://wiki.python.org/moin/BitManipulation
    count = 0
    while(int_type):
        int_type &= int_type - 1
        count += 1
    return(count)

n = int(sys.stdin.readline())
TRESHHOLD = 70
data = np.array([np.frombuffer(sys.stdin.readline().strip("\n").encode(), dtype=np.int64) for _ in range(n)])

for idx in range(len(data)):
    for idx2 in range(len(data)):
        if idx == idx2: continue
        if np.sum([bitCount(np.bitwise_and(data[idx][i], data[idx2][i])) for i in range(4)], dtype=np.int8) >= 70:
            print(idx + " " + idx2)

